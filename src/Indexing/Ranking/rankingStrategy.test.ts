import { Index } from "../Index"
import { simpleDocuments } from "../__test__/testDocuments"
import { TFIDF, BM25 } from "./rankingStrategy"
import IIndexOptions from "../IIndexOptions"

describe("Vector Scoring Strategy Module", () => {
	const getAllVectorsFromOptions = (options: IIndexOptions) => {
		const index = new Index(simpleDocuments, options)
		index.build()
		const documents = index.getAllIndexDocuments().map(doc => doc.vector)
		return documents
	}

	it("TFIDF works", () => {
		const withDefaults = getAllVectorsFromOptions({
			ranker: TFIDF,
			rankerOptions: {}
		})
		const expectedDefaultOutcome = [
			[
				0.4472135954999579, 0.4472135954999579, 0.4472135954999579, 0, 0, 0, 0, 0, 0.4472135954999579, 0, 0.4472135954999579, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			],
			[
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2886751345948128, 0.2886751345948128, 0.2886751345948128, 0.2886751345948128, 0.2886751345948128,
				0.2886751345948128, 0.2886751345948128, 0.2886751345948128, 0.2886751345948128, 0, 0.2886751345948128, 0.2886751345948128, 0.2886751345948128,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			],
			[
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2357022603955158, 0.2357022603955158, 0.2357022603955158,
				0.2357022603955158, 0.2357022603955158, 0.2357022603955158, 0.2357022603955158, 0.2357022603955158, 0.2357022603955158, 0.2357022603955158,
				0.2357022603955158, 0.2357022603955158, 0.2357022603955158, 0.2357022603955158, 0.2357022603955158, 0.2357022603955158, 0.2357022603955158,
				0.2357022603955158
			]
		]
		expect(withDefaults).toStrictEqual(expectedDefaultOutcome)

		const withNoNormalization = getAllVectorsFromOptions({
			ranker: TFIDF,
			rankerOptions: {
				smartirs: "ntn"
			}
		})
		const expectedNoNormalizationResult = [
			[
				0.3521825181113625, 0.3521825181113625, 0.3521825181113625, 0, 0, 0, 0, 0, 0.3521825181113625, 0, 0.3521825181113625, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			],
			[
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3521825181113625, 0.3521825181113625, 0.3521825181113625, 0.3521825181113625, 0.3521825181113625,
				0.3521825181113625, 0.3521825181113625, 0.3521825181113625, 0.3521825181113625, 0, 0.3521825181113625, 0.3521825181113625, 0.3521825181113625,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			],
			[
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.3521825181113625, 0.3521825181113625, 0.3521825181113625,
				0.3521825181113625, 0.3521825181113625, 0.3521825181113625, 0.3521825181113625, 0.3521825181113625, 0.3521825181113625, 0.3521825181113625,
				0.3521825181113625, 0.3521825181113625, 0.3521825181113625, 0.3521825181113625, 0.3521825181113625, 0.3521825181113625, 0.3521825181113625,
				0.3521825181113625
			]
		]
		expect(withNoNormalization).toStrictEqual(expectedNoNormalizationResult)

		const withPivotNoNormalization = getAllVectorsFromOptions({
			ranker: TFIDF,
			rankerOptions: {
				smartirs: "ntn",
				pivot: true
			}
		})
		const expectedPivotNoNormalization = [
			[
				0.054923374775859915, 0.054923374775859915, 0.054923374775859915, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 0.054923374775859915, 1e-15,
				0.054923374775859915, 1e-15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			],
			[
				0, 0, 0, 1e-15, 1e-15, 1e-15, 1e-15, 1e-15, 0, 1e-15, 0, 1e-15, 0.054923374775859915, 0.054923374775859915, 0.054923374775859915,
				0.054923374775859915, 0.054923374775859915, 0.054923374775859915, 0.054923374775859915, 0.054923374775859915, 0.054923374775859915, 1e-15,
				0.054923374775859915, 0.054923374775859915, 0.054923374775859915, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			],
			[
				0, 0, 0, 0, 1e-15, 1e-15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1e-15, 0, 0, 0, 0.054923374775859915, 0.054923374775859915,
				0.054923374775859915, 0.054923374775859915, 0.054923374775859915, 0.054923374775859915, 0.054923374775859915, 0.054923374775859915,
				0.054923374775859915, 0.054923374775859915, 0.054923374775859915, 0.054923374775859915, 0.054923374775859915, 0.054923374775859915,
				0.054923374775859915, 0.054923374775859915, 0.054923374775859915, 0.054923374775859915
			]
		]
		expect(withPivotNoNormalization).toStrictEqual(expectedPivotNoNormalization)
	})

	it("BM25 works", () => {
		const withDefaults = getAllVectorsFromOptions({
			ranker: BM25,
			rankerOptions: {}
		})
		const expectedWithDefaults = [
			[
				0.4903055694269298, 0.4903055694269298, 0.4903055694269298, 0.23494955555459857, 0.06675084913719916, 0.06675084913719916, 0.23494955555459857,
				0.23494955555459857, 0.4903055694269298, 0.23494955555459857, 0.4903055694269298, 0.23494955555459857, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			],
			[
				0, 0, 0, 0.1936565498590792, 0.055019210883631195, 0.055019210883631195, 0.1936565498590792, 0.1936565498590792, 0, 0.1936565498590792, 0,
				0.1936565498590792, 0.4041330690231732, 0.4041330690231732, 0.4041330690231732, 0.4041330690231732, 0.4041330690231732, 0.4041330690231732,
				0.4041330690231732, 0.4041330690231732, 0.4041330690231732, 0.1936565498590792, 0.4041330690231732, 0.4041330690231732, 0.4041330690231732, 0,
				0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
			],
			[
				0, 0, 0, 0, 0.05383647307004996, 0.05383647307004996, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.18949355077771368, 0, 0, 0,
				0.3954454950871656, 0.3954454950871656, 0.3954454950871656, 0.3954454950871656, 0.3954454950871656, 0.3954454950871656, 0.3954454950871656,
				0.3954454950871656, 0.3954454950871656, 0.3954454950871656, 0.3954454950871656, 0.3954454950871656, 0.3954454950871656, 0.3954454950871656,
				0.3954454950871656, 0.3954454950871656, 0.3954454950871656, 0.3954454950871656
			]
		]
		expect(withDefaults).toStrictEqual(expectedWithDefaults)
	})
})
